{"version":3,"sources":["ThemeProvider.tsx","DeviceSelect/components/DeviceSelectContainer.tsx","DeviceSelect/components/VideoPreviewContainer.tsx","DeviceSelect/components/DeviceSelectMessage.tsx","DeviceSelect/components/VoidVideoPreview.tsx","DeviceSelect/components/Defer.tsx","DeviceSelect/components/VideoPreview.tsx","DeviceSelect/utils.ts","DeviceSelect/VideoPreview.tsx","DeviceSelect/DeviceSelect.tsx","DeviceSelect/DeviceSelectForm.tsx","MediaStreamPlayer.tsx","Placeholder.tsx","media-constraint.ts","webrtc/reducer.ts","webrtc/index.ts","component-value.ts","WebRtcStreamer.tsx","index.tsx"],"names":["ThemeProvider","props","stTheme","useRenderData","theme","stThemeJson","JSON","stringify","muiTheme","React","useMemo","parse","textColorScale","chroma","scale","textColor","backgroundColor","mode","createTheme","palette","primary","main","primaryColor","background","default","paper","secondaryBackgroundColor","text","secondary","hex","disabled","typography","fontFamily","font","children","DeviceSelectContainer","useTheme","isSmallViewport","useMediaQuery","breakpoints","down","useEffect","Streamlit","setFrameHeight","Stack","direction","spacing","VideoPreviewContainer","styled","Box","position","width","DeviceSelectMessage","Paper","display","justifyContent","alignItems","height","padding","boxSizing","StyledPaper","VoidVideoPreview","fontSize","memo","OverlayBox","margin","content","opacity","$transparent","transition","Defer","useState","elapsed","setElapsed","timer","setTimeout","time","clearTimeout","VideoPreview","maxWidth","maxHeight","stopAllTracks","stream","getVideoTracks","forEach","track","stop","getAudioTracks","videoRef","useRef","deviceId","unmounted","navigator","mediaDevices","getUserMedia","video","audio","then","_stream","current","srcObject","ref","autoPlay","muted","ensureValidSelection","devices","selectedDeviceId","deviceIds","map","d","includes","length","deviceSelectionReducer","state","action","type","unavailable","videoInputs","audioInputs","audioOutputs","selectedVideoInputDeviceId","selectedAudioInputDeviceId","filter","kind","payload","DeviceSelect","useVideo","useAudio","defaultVideoDeviceId","defaultAudioDeviceId","onSelect","permissionState","setPermissionState","useReducer","deviceSelectionDispatch","updateDeviceList","useCallback","enumerateDevices","defaultDeviceIdsRef","videoDeviceId","audioDeviceId","a","catch","err","handleDeviceChange","ondevicechange","handleVideoInputChange","e","target","value","handleAudioInputChange","videoInput","find","audioInput","Error","error","DOMException","name","message","Alert","severity","FormControl","fullWidth","InputLabel","htmlFor","NativeSelect","inputProps","id","onChange","device","label","DeviceSelectForm","onClose","deviceSelectProps","Button","variant","color","onClick","MediaStreamPlayer","hasVideo","refCallback","node","refreshFrameHeight","videoProps","hidden","userDefinedVideoAttrs","style","controls","controlsList","crossOrigin","loop","mediaGroup","playsInline","preload","poster","disablePictureInPicture","disableRemotePlayback","onCanPlay","audioProps","userDefinedAudioAttrs","Placeholder","elevation","loading","CircularProgress","compileMediaConstraints","src","constraints","initialState","webRtcState","sdpOffer","signallingTimedOut","connectReducer","onComponentValueChange","nextState","offer","reducer","nextPlaying","playingChanged","nextSdpOffer","prevSdpOffer","console","log","playing","toJSON","isWebRtcMode","val","setupOffer","pc","createOffer","setLocalDescription","Promise","resolve","iceGatheringState","addEventListener","checkState","removeEventListener","localDescription","setComponentValue","componentValue","WebRtcStreamerInner","constraintsFromPython","setDevices","signallingTimerRef","pcRef","dispatch","undefined","getTransceivers","transceiver","getSenders","sender","close","stopInner","finally","stopRef","start","config","rtcConfiguration","RTCPeerConnection","evt","streams","mediaStreamConstraints","getTracks","addTrack","addTransceiver","iceConnectionState","startInner","sdpAnswerJson","remoteDescription","sdpAnswer","setRemoteDescription","desiredPlayingState","useWebRtc","buttonDisabled","receivable","isReceivable","transmittable","isTransmittable","videoEnabled","audioEnabled","handleDeviceSelect","deviceSelectOpen","setDeviceSelectOpen","openDeviceSelect","closeDeviceSelect","py","videoHtmlAttrs","audioHtmlAttrs","WebRtcStreamer","renderData","args","rtc_configuration","media_stream_constraints","video_html_attrs","audio_html_attrs","ReactDOM","render","StrictMode","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.6f68f458.chunk.js","sourcesContent":["import React from \"react\";\nimport { Theme } from \"streamlit-component-lib\";\nimport { useRenderData } from \"streamlit-component-lib-react-hooks\";\nimport {\n  createTheme,\n  ThemeProvider as MuiThemeProvider,\n} from \"@mui/material/styles\";\nimport chroma from \"chroma-js\";\n\ninterface StreamlitThemeProviderProps {}\nexport const ThemeProvider: React.VFC<\n  React.PropsWithChildren<StreamlitThemeProviderProps>\n> = (props) => {\n  const { theme: stTheme } = useRenderData();\n\n  const stThemeJson = JSON.stringify(stTheme);\n  const muiTheme = React.useMemo(() => {\n    const stTheme: Theme = JSON.parse(stThemeJson);\n    if (stTheme == null) {\n      return undefined;\n    }\n\n    const textColorScale = chroma\n      .scale([stTheme.textColor, stTheme.backgroundColor])\n      .mode(\"lab\");\n\n    return createTheme({\n      palette: {\n        primary: {\n          main: stTheme.primaryColor,\n        },\n        background: {\n          default: stTheme.backgroundColor,\n          paper: stTheme.secondaryBackgroundColor,\n        },\n        text: {\n          primary: stTheme.textColor,\n          secondary: textColorScale(0.1).hex(),\n          disabled: textColorScale(0.5).hex(),\n        },\n      },\n      typography: {\n        fontFamily: stTheme.font,\n      },\n    });\n  }, [stThemeJson]);\n\n  if (muiTheme == null) {\n    return <>{props.children}</>;\n  }\n\n  return <MuiThemeProvider theme={muiTheme}>{props.children}</MuiThemeProvider>;\n};\n\nexport default ThemeProvider;\n","import { Streamlit } from \"streamlit-component-lib\";\nimport React, { useEffect } from \"react\";\nimport Stack from \"@mui/material/Stack\";\nimport { useTheme } from \"@mui/material/styles\";\nimport useMediaQuery from \"@mui/material/useMediaQuery\";\n\ninterface DeviceSelectContainerProps {\n  children: React.ReactNode;\n}\nconst DeviceSelectContainer: React.VFC<DeviceSelectContainerProps> = (\n  props\n) => {\n  const theme = useTheme();\n  const isSmallViewport = useMediaQuery(theme.breakpoints.down(\"sm\"));\n\n  useEffect(() => {\n    Streamlit.setFrameHeight();\n  }, [isSmallViewport]);\n\n  return (\n    <Stack direction={isSmallViewport ? \"column\" : \"row\"} spacing={2}>\n      {props.children}\n    </Stack>\n  );\n};\n\nexport default DeviceSelectContainer;\n","import Box from \"@mui/material/Box\";\nimport { styled } from \"@mui/material/styles\";\n\nconst StyledBox = styled(Box)(({ theme }) => ({\n  position: \"relative\",\n  [theme.breakpoints.down(\"sm\")]: {\n    width: \"100%\",\n  },\n  width: theme.spacing(24),\n  height: theme.spacing(16),\n  maxHeight: theme.spacing(16),\n  display: \"flex\",\n  justifyContent: \"center\",\n  alignItems: \"center\",\n}));\n\nconst VideoPreviewContainer = StyledBox;\n\nexport default VideoPreviewContainer;\n","import Paper from \"@mui/material/Paper\";\nimport { styled } from \"@mui/material/styles\";\n\nconst StyledPaper = styled(Paper)(({ theme }) => ({\n  display: \"flex\",\n  justifyContent: \"center\",\n  alignItems: \"center\",\n  width: \"100%\",\n  height: \"100%\",\n  padding: theme.spacing(2),\n  boxSizing: \"border-box\",\n}));\n\nconst DeviceSelectMessage = StyledPaper;\n\nexport default DeviceSelectMessage;\n","import React from \"react\";\nimport Paper from \"@mui/material/Paper\";\nimport VideocamOffIcon from \"@mui/icons-material/VideocamOff\";\nimport { styled } from \"@mui/material/styles\";\n\nconst StyledPaper = styled(Paper)({\n  display: \"flex\",\n  justifyContent: \"center\",\n  alignItems: \"center\",\n  width: \"100%\",\n  height: \"100%\",\n});\n\nconst VoidVideoPreview: React.VFC = () => {\n  return (\n    <StyledPaper>\n      <VideocamOffIcon fontSize=\"large\" />\n    </StyledPaper>\n  );\n};\n\nexport default React.memo(VoidVideoPreview);\n","import React, { useEffect, useState } from \"react\";\nimport Box from \"@mui/material/Box\";\nimport { styled } from \"@mui/material/styles\";\n\ninterface OverlayBoxProps {\n  $transparent: boolean;\n}\nconst OverlayBox = styled(Box)<OverlayBoxProps>(({ theme, ...props }) => ({\n  margin: 0,\n  padding: 0,\n  position: \"relative\",\n  \"&:before\": {\n    position: \"absolute\",\n    content: '\"\"',\n    width: \"100%\",\n    height: \"100%\",\n    opacity: props.$transparent ? 0 : 1,\n    backgroundColor: theme.palette.background.default,\n    transition: \"opacity 0.3s\",\n  },\n}));\n\ninterface DeferProps {\n  time: number;\n  children: React.ReactElement;\n}\nconst Defer: React.VFC<DeferProps> = (props) => {\n  const [elapsed, setElapsed] = useState(false);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setElapsed(true);\n    }, props.time);\n\n    return () => clearTimeout(timer);\n  }, [props.time]);\n\n  return <OverlayBox $transparent={elapsed}>{props.children}</OverlayBox>;\n};\n\nexport default Defer;\n","import { styled } from \"@mui/material/styles\";\n\nconst StyledVideo = styled(\"video\")({\n  maxWidth: \"100%\",\n  maxHeight: \"100%\",\n});\n\nconst VideoPreview = StyledVideo;\n\nexport default VideoPreview;\n","export function stopAllTracks(stream: MediaStream) {\n  stream.getVideoTracks().forEach((track) => track.stop());\n  stream.getAudioTracks().forEach((track) => track.stop());\n}\n","import React, { useEffect, useRef } from \"react\";\nimport VideoPreviewComponent from \"./components/VideoPreview\";\nimport { stopAllTracks } from \"./utils\";\n\nexport interface VideoPreviewProps {\n  deviceId: MediaDeviceInfo[\"deviceId\"];\n}\nconst VideoPreview: React.VFC<VideoPreviewProps> = (props) => {\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  useEffect(() => {\n    if (props.deviceId == null) {\n      return;\n    }\n\n    let stream: MediaStream | null = null;\n    let unmounted = false;\n    navigator.mediaDevices\n      .getUserMedia({ video: { deviceId: props.deviceId }, audio: false })\n      .then((_stream) => {\n        stream = _stream;\n\n        if (unmounted) {\n          stopAllTracks(stream);\n          return;\n        }\n\n        if (videoRef.current) {\n          videoRef.current.srcObject = stream;\n        }\n      });\n\n    return () => {\n      unmounted = true;\n      if (stream) {\n        stopAllTracks(stream);\n      }\n    };\n  }, [props.deviceId]);\n\n  return <VideoPreviewComponent ref={videoRef} autoPlay muted />;\n};\n\nexport default React.memo(VideoPreview);\n","import { Streamlit } from \"streamlit-component-lib\";\nimport React, {\n  useReducer,\n  Reducer,\n  useCallback,\n  useState,\n  useEffect,\n  useRef,\n} from \"react\";\nimport NativeSelect, { NativeSelectProps } from \"@mui/material/NativeSelect\";\nimport Alert from \"@mui/material/Alert\";\nimport Stack from \"@mui/material/Stack\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport FormControl from \"@mui/material/FormControl\";\nimport DeviceSelectContainer from \"./components/DeviceSelectContainer\";\nimport VideoPreviewContainer from \"./components/VideoPreviewContainer\";\nimport DeviceSelectMessage from \"./components/DeviceSelectMessage\";\nimport VoidVideoPreview from \"./components/VoidVideoPreview\";\nimport Defer from \"./components/Defer\";\nimport VideoPreview from \"./VideoPreview\";\nimport { stopAllTracks } from \"./utils\";\n\nfunction ensureValidSelection(\n  devices: MediaDeviceInfo[],\n  selectedDeviceId: MediaDeviceInfo[\"deviceId\"] | null\n): MediaDeviceInfo[\"deviceId\"] | null {\n  const deviceIds = devices.map((d) => d.deviceId);\n  if (selectedDeviceId && deviceIds.includes(selectedDeviceId)) {\n    return selectedDeviceId;\n  }\n  if (deviceIds.length > 0) {\n    return deviceIds[0];\n  }\n  return null;\n}\n\ninterface DeviceSelectionState {\n  unavailable: boolean;\n  videoInputs: MediaDeviceInfo[];\n  audioInputs: MediaDeviceInfo[];\n  audioOutputs: MediaDeviceInfo[];\n  // TODO: Add selectedAudioOutputDeviceId\n  selectedVideoInputDeviceId: MediaDeviceInfo[\"deviceId\"] | null;\n  selectedAudioInputDeviceId: MediaDeviceInfo[\"deviceId\"] | null;\n}\ninterface DeviceSelectionActionBase {\n  type: string;\n}\ninterface DeviceSelectionSetUnavailableAction\n  extends DeviceSelectionActionBase {\n  type: \"SET_UNAVAILABLE\";\n}\ninterface DeviceSelectionUpdateDevicesAction extends DeviceSelectionActionBase {\n  type: \"UPDATE_DEVICES\";\n  devices: MediaDeviceInfo[];\n}\ninterface DeviceSelectionUpdateSelectedDeviceIdAction\n  extends DeviceSelectionActionBase {\n  type: \"UPDATE_SELECTED_DEVICE_ID\";\n  payload: {\n    selectedVideoInputDeviceId?: MediaDeviceInfo[\"deviceId\"] | null;\n    selectedAudioInputDeviceId?: MediaDeviceInfo[\"deviceId\"] | null;\n  };\n}\ntype DeviceSelectionAction =\n  | DeviceSelectionSetUnavailableAction\n  | DeviceSelectionUpdateDevicesAction\n  | DeviceSelectionUpdateSelectedDeviceIdAction;\nconst deviceSelectionReducer: Reducer<\n  DeviceSelectionState,\n  DeviceSelectionAction\n> = (state, action) => {\n  switch (action.type) {\n    case \"SET_UNAVAILABLE\": {\n      return {\n        unavailable: true,\n        videoInputs: [],\n        audioInputs: [],\n        audioOutputs: [],\n        selectedVideoInputDeviceId: null,\n        selectedAudioInputDeviceId: null,\n      };\n    }\n    case \"UPDATE_DEVICES\": {\n      const devices = action.devices;\n      const videoInputs = devices.filter((d) => d.kind === \"videoinput\");\n      const audioInputs = devices.filter((d) => d.kind === \"audioinput\");\n      const audioOutputs = devices.filter((d) => d.kind === \"audiooutput\");\n\n      const selectedVideoInputDeviceId = ensureValidSelection(\n        videoInputs,\n        state.selectedVideoInputDeviceId\n      );\n      const selectedAudioInputDeviceId = ensureValidSelection(\n        audioInputs,\n        state.selectedAudioInputDeviceId\n      );\n\n      return {\n        ...state,\n        videoInputs,\n        audioInputs,\n        audioOutputs,\n        selectedVideoInputDeviceId,\n        selectedAudioInputDeviceId,\n      };\n    }\n    case \"UPDATE_SELECTED_DEVICE_ID\": {\n      return {\n        ...state,\n        ...action.payload,\n      };\n    }\n  }\n};\n\ntype PermissionState = \"WAITING\" | \"ALLOWED\" | Error;\n\nexport interface DeviceSelectProps {\n  video: boolean;\n  audio: boolean;\n  defaultVideoDeviceId: MediaDeviceInfo[\"deviceId\"] | null;\n  defaultAudioDeviceId: MediaDeviceInfo[\"deviceId\"] | null;\n  onSelect: (devices: {\n    video: MediaDeviceInfo | null;\n    audio: MediaDeviceInfo | null;\n  }) => void;\n}\nconst DeviceSelect: React.VFC<DeviceSelectProps> = (props) => {\n  const {\n    video: useVideo,\n    audio: useAudio,\n    defaultVideoDeviceId,\n    defaultAudioDeviceId,\n    onSelect,\n  } = props;\n\n  const [permissionState, setPermissionState] =\n    useState<PermissionState>(\"WAITING\");\n\n  const [\n    {\n      unavailable,\n      videoInputs,\n      selectedVideoInputDeviceId,\n      audioInputs,\n      selectedAudioInputDeviceId,\n    },\n    deviceSelectionDispatch,\n  ] = useReducer(deviceSelectionReducer, {\n    unavailable: false,\n    videoInputs: [],\n    audioInputs: [],\n    audioOutputs: [],\n    selectedVideoInputDeviceId: defaultVideoDeviceId,\n    selectedAudioInputDeviceId: defaultAudioDeviceId,\n  });\n\n  // Ref: https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/ondevicechange#example\n  const updateDeviceList = useCallback(() => {\n    if (typeof navigator?.mediaDevices?.enumerateDevices !== \"function\") {\n      deviceSelectionDispatch({ type: \"SET_UNAVAILABLE\" });\n      return;\n    }\n\n    return navigator.mediaDevices.enumerateDevices().then((devices) => {\n      deviceSelectionDispatch({\n        type: \"UPDATE_DEVICES\",\n        devices,\n      });\n    });\n  }, []);\n\n  // These values are passed to inside the useEffect below via a ref\n  // because they are used there only for UX improvement\n  // and should not be added to the dependency list to avoid triggering re-execution.\n  const defaultDeviceIdsRef = useRef({\n    video: defaultVideoDeviceId,\n    audio: defaultAudioDeviceId,\n  });\n  defaultDeviceIdsRef.current = {\n    video: defaultVideoDeviceId,\n    audio: defaultAudioDeviceId,\n  };\n  // Call `getUserMedia()` to ask the user for the permission.\n  useEffect(() => {\n    if (typeof navigator?.mediaDevices?.getUserMedia !== \"function\") {\n      deviceSelectionDispatch({ type: \"SET_UNAVAILABLE\" });\n      return;\n    }\n\n    setPermissionState(\"WAITING\");\n\n    const { video: videoDeviceId, audio: audioDeviceId } =\n      defaultDeviceIdsRef.current;\n    navigator.mediaDevices\n      .getUserMedia({\n        // Specify the target devices if the user already selected specific ones.\n        // This is not mandatory but beneficial for better UX\n        // as unused devices are not accessed so that their LED indicators\n        // will not be unnecessarily turned on.\n        video:\n          useVideo && videoDeviceId ? { deviceId: videoDeviceId } : useVideo,\n        audio:\n          useAudio && audioDeviceId ? { deviceId: audioDeviceId } : useAudio,\n      })\n      .then(async (stream) => {\n        stopAllTracks(stream);\n\n        await updateDeviceList();\n\n        setPermissionState(\"ALLOWED\");\n      })\n      .catch((err) => {\n        setPermissionState(err);\n      });\n  }, [useVideo, useAudio, updateDeviceList]);\n\n  // Set up the ondevicechange event handler\n  useEffect(() => {\n    const handleDeviceChange = () => updateDeviceList();\n    navigator.mediaDevices.ondevicechange = handleDeviceChange;\n\n    return () => {\n      if (navigator.mediaDevices.ondevicechange === handleDeviceChange) {\n        navigator.mediaDevices.ondevicechange = null;\n      }\n    };\n  }, [updateDeviceList]);\n\n  const handleVideoInputChange = useCallback<\n    NonNullable<NativeSelectProps[\"onChange\"]>\n  >((e) => {\n    deviceSelectionDispatch({\n      type: \"UPDATE_SELECTED_DEVICE_ID\",\n      payload: {\n        selectedVideoInputDeviceId: e.target.value,\n      },\n    });\n  }, []);\n\n  const handleAudioInputChange = useCallback<\n    NonNullable<NativeSelectProps[\"onChange\"]>\n  >((e) => {\n    deviceSelectionDispatch({\n      type: \"UPDATE_SELECTED_DEVICE_ID\",\n      payload: {\n        selectedAudioInputDeviceId: e.target.value,\n      },\n    });\n  }, []);\n\n  // Call onSelect\n  useEffect(() => {\n    const videoInput = useVideo\n      ? videoInputs.find((d) => d.deviceId === selectedVideoInputDeviceId)\n      : null;\n    const audioInput = useAudio\n      ? audioInputs.find((d) => d.deviceId === selectedAudioInputDeviceId)\n      : null;\n    onSelect({ video: videoInput || null, audio: audioInput || null });\n  }, [\n    useVideo,\n    useAudio,\n    onSelect,\n    videoInputs,\n    audioInputs,\n    selectedVideoInputDeviceId,\n    selectedAudioInputDeviceId,\n  ]);\n\n  useEffect(() => {\n    setTimeout(() => Streamlit.setFrameHeight());\n  });\n\n  if (unavailable) {\n    return <DeviceSelectMessage>Unavailable</DeviceSelectMessage>;\n  }\n\n  if (permissionState === \"WAITING\") {\n    return (\n      <Defer time={1000}>\n        <DeviceSelectMessage>\n          Please allow the app to use your media devices\n        </DeviceSelectMessage>\n      </Defer>\n    );\n  }\n\n  if (permissionState instanceof Error) {\n    const error = permissionState;\n    if (\n      error instanceof DOMException &&\n      (error.name === \"NotReadableError\" || error.name === \"NotFoundError\")\n    ) {\n      return (\n        <DeviceSelectMessage>\n          Device not available ({error.message})\n        </DeviceSelectMessage>\n      );\n    } else if (\n      error instanceof DOMException &&\n      error.name === \"NotAllowedError\"\n    ) {\n      return (\n        <DeviceSelectMessage>\n          Access denied ({error.message})\n        </DeviceSelectMessage>\n      );\n    } else {\n      return (\n        <DeviceSelectMessage>\n          <Alert severity=\"error\">\n            {error.name}: {error.message}\n          </Alert>\n        </DeviceSelectMessage>\n      );\n    }\n  }\n\n  return (\n    <DeviceSelectContainer>\n      <VideoPreviewContainer>\n        {useVideo && selectedVideoInputDeviceId ? (\n          <VideoPreview deviceId={selectedVideoInputDeviceId} />\n        ) : (\n          <VoidVideoPreview />\n        )}\n      </VideoPreviewContainer>\n      <Stack spacing={2} justifyContent=\"center\">\n        {useVideo && selectedVideoInputDeviceId && (\n          <FormControl fullWidth>\n            <InputLabel htmlFor=\"device-select-video-input\">\n              Video Input\n            </InputLabel>\n            <NativeSelect\n              inputProps={{\n                name: \"video-input\",\n                id: \"device-select-video-input\",\n              }}\n              value={selectedVideoInputDeviceId}\n              onChange={handleVideoInputChange}\n            >\n              {videoInputs.map((device) => (\n                <option key={device.deviceId} value={device.deviceId}>\n                  {device.label}\n                </option>\n              ))}\n            </NativeSelect>\n          </FormControl>\n        )}\n        {useAudio && selectedAudioInputDeviceId && (\n          <FormControl fullWidth>\n            <InputLabel htmlFor=\"device-select-audio-input\">\n              Audio Input\n            </InputLabel>\n            <NativeSelect\n              inputProps={{\n                name: \"audio-input\",\n                id: \"device-select-audio-input\",\n              }}\n              value={selectedAudioInputDeviceId}\n              onChange={handleAudioInputChange}\n            >\n              {audioInputs.map((device) => (\n                <option key={device.deviceId} value={device.deviceId}>\n                  {device.label}\n                </option>\n              ))}\n            </NativeSelect>\n          </FormControl>\n        )}\n      </Stack>\n    </DeviceSelectContainer>\n  );\n};\n\nexport default DeviceSelect;\n","import React from \"react\";\nimport Box from \"@mui/material/Box\";\nimport Button from \"@mui/material/Button\";\nimport Stack from \"@mui/material/Stack\";\nimport DeviceSelect, { DeviceSelectProps } from \"./DeviceSelect\";\n\nexport interface DeviceSelectFormProps extends DeviceSelectProps {\n  onClose: () => void;\n}\nconst DeviceSelectForm: React.VFC<DeviceSelectFormProps> = ({\n  onClose,\n  ...deviceSelectProps\n}) => {\n  return (\n    <Stack spacing={2}>\n      <DeviceSelect {...deviceSelectProps} />\n      <Box>\n        <Button variant=\"contained\" color=\"primary\" onClick={onClose}>\n          Done\n        </Button>\n      </Box>\n    </Stack>\n  );\n};\n\nexport default DeviceSelectForm;\n","import { Streamlit } from \"streamlit-component-lib\";\nimport React, {\n  useEffect,\n  useCallback,\n  VideoHTMLAttributes,\n  AudioHTMLAttributes,\n  HTMLAttributes,\n} from \"react\";\n\ntype UserDefinedHTMLVideoAttributes = Partial<\n  Omit<\n    VideoHTMLAttributes<HTMLVideoElement>,\n    keyof Omit<HTMLAttributes<HTMLVideoElement>, \"hidden\" | \"style\"> | \"src\"\n  >\n>;\ntype UserDefinedHTMLAudioAttributes = Partial<\n  Omit<\n    AudioHTMLAttributes<HTMLVideoElement>,\n    keyof Omit<HTMLAttributes<HTMLVideoElement>, \"hidden\" | \"style\"> | \"src\"\n  >\n>;\n\ninterface MediaStreamPlayerProps {\n  stream: MediaStream;\n  userDefinedVideoAttrs: UserDefinedHTMLVideoAttributes | undefined;\n  userDefinedAudioAttrs: UserDefinedHTMLAudioAttributes | undefined;\n}\nconst MediaStreamPlayer: React.VFC<MediaStreamPlayerProps> = (props) => {\n  useEffect(() => {\n    Streamlit.setFrameHeight();\n  });\n\n  const hasVideo = props.stream.getVideoTracks().length > 0;\n\n  const refCallback = useCallback(\n    (node: HTMLVideoElement | HTMLAudioElement | null) => {\n      if (node) {\n        node.srcObject = props.stream;\n      }\n    },\n    [props.stream]\n  );\n\n  const refreshFrameHeight = useCallback(() => Streamlit.setFrameHeight(), []);\n\n  if (hasVideo) {\n    // NOTE: Enumerate all allowed props instead of simply using spread operator\n    //       passing all the fields in props.userDefinedVideoAttrs\n    //       in order to block unexpected fields especially like dangerouslySetInnerHTML.\n    const videoProps: VideoHTMLAttributes<HTMLVideoElement> = {\n      hidden: props.userDefinedVideoAttrs?.hidden,\n      style: props.userDefinedVideoAttrs?.style,\n      autoPlay: props.userDefinedVideoAttrs?.autoPlay,\n      controls: props.userDefinedVideoAttrs?.controls,\n      controlsList: props.userDefinedVideoAttrs?.controlsList,\n      crossOrigin: props.userDefinedVideoAttrs?.crossOrigin,\n      loop: props.userDefinedVideoAttrs?.loop,\n      mediaGroup: props.userDefinedVideoAttrs?.mediaGroup,\n      muted: props.userDefinedVideoAttrs?.muted,\n      playsInline: props.userDefinedVideoAttrs?.playsInline,\n      preload: props.userDefinedVideoAttrs?.preload,\n      height: props.userDefinedVideoAttrs?.height,\n      poster: props.userDefinedVideoAttrs?.poster,\n      width: props.userDefinedVideoAttrs?.width,\n      disablePictureInPicture:\n        props.userDefinedVideoAttrs?.disablePictureInPicture,\n      disableRemotePlayback: props.userDefinedVideoAttrs?.disableRemotePlayback,\n    };\n\n    return (\n      <video {...videoProps} ref={refCallback} onCanPlay={refreshFrameHeight} />\n    );\n  } else {\n    const audioProps: AudioHTMLAttributes<HTMLAudioElement> = {\n      hidden: props.userDefinedAudioAttrs?.hidden,\n      style: props.userDefinedAudioAttrs?.style,\n      autoPlay: props.userDefinedAudioAttrs?.autoPlay,\n      controls: props.userDefinedAudioAttrs?.controls,\n      controlsList: props.userDefinedAudioAttrs?.controlsList,\n      crossOrigin: props.userDefinedAudioAttrs?.crossOrigin,\n      loop: props.userDefinedAudioAttrs?.loop,\n      mediaGroup: props.userDefinedAudioAttrs?.mediaGroup,\n      muted: props.userDefinedAudioAttrs?.muted,\n      playsInline: props.userDefinedAudioAttrs?.playsInline,\n      preload: props.userDefinedAudioAttrs?.preload,\n    };\n    return <audio ref={refCallback} {...audioProps} />;\n  }\n};\n\nexport default React.memo(MediaStreamPlayer);\n","import { Streamlit } from \"streamlit-component-lib\";\nimport React, { useEffect } from \"react\";\nimport Paper from \"@mui/material/Paper\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\nimport VideoLabelIcon from \"@mui/icons-material/VideoLabel\";\nimport { styled } from \"@mui/material/styles\";\n\nconst StyledPaper = styled(Paper)(({ theme }) => ({\n  padding: theme.spacing(4),\n  display: \"flex\",\n  justifyContent: \"center\",\n  alignItems: \"center\",\n  width: \"100%\",\n}));\n\ninterface PlaceholderProps {\n  loading: boolean;\n}\nconst Placeholder: React.VFC<PlaceholderProps> = (props) => {\n  useEffect(() => {\n    Streamlit.setFrameHeight();\n  });\n\n  return (\n    <StyledPaper elevation={0}>\n      {props.loading ? (\n        <CircularProgress />\n      ) : (\n        <VideoLabelIcon fontSize=\"large\" />\n      )}\n    </StyledPaper>\n  );\n};\n\nexport default React.memo(Placeholder);\n","export function compileMediaConstraints(\n  src: MediaStreamConstraints | undefined,\n  videoDeviceId: string | undefined,\n  audioDeviceId: string | undefined\n): MediaStreamConstraints {\n  const constraints = src || {};\n\n  if (videoDeviceId) {\n    if (constraints.video === true) {\n      constraints.video = {\n        deviceId: videoDeviceId,\n      };\n    } else if (\n      typeof constraints.video === \"object\" ||\n      constraints.video == null\n    ) {\n      constraints.video = {\n        ...constraints.video,\n        deviceId: videoDeviceId,\n      };\n    }\n  }\n\n  if (audioDeviceId) {\n    if (constraints.audio === true) {\n      constraints.audio = {\n        deviceId: audioDeviceId,\n      };\n    } else if (\n      typeof constraints.audio === \"object\" ||\n      constraints.audio == null\n    ) {\n      constraints.audio = {\n        ...constraints.audio,\n        deviceId: audioDeviceId,\n      };\n    }\n  }\n\n  return constraints;\n}\n\ninterface MediaUsage {\n  videoEnabled: boolean;\n  audioEnabled: boolean;\n}\nexport function getMediaUsage(constraintsFromPython: any): MediaUsage {\n  const videoEnabled = constraintsFromPython\n    ? !!constraintsFromPython.video\n    : true;\n  const audioEnabled = constraintsFromPython\n    ? !!constraintsFromPython.audio\n    : true;\n\n  return { videoEnabled, audioEnabled };\n}\n","import { ComponentValue } from \"../component-value\";\nimport { Action } from \"./actions\";\n\nexport type WebRtcState = \"STOPPED\" | \"SIGNALLING\" | \"PLAYING\" | \"STOPPING\";\nexport interface State {\n  webRtcState: WebRtcState;\n  sdpOffer: RTCSessionDescription | null;\n  signallingTimedOut: boolean;\n  stream: MediaStream | null;\n  error: Error | null;\n}\nexport const initialState: State = {\n  webRtcState: \"STOPPED\",\n  sdpOffer: null,\n  signallingTimedOut: false,\n  stream: null,\n  error: null,\n};\n\nexport const reducer: React.Reducer<State, Action> = (state, action) => {\n  switch (action.type) {\n    case \"SIGNALLING_START\":\n      return {\n        ...state,\n        webRtcState: \"SIGNALLING\",\n        stream: null,\n        error: null,\n        signallingTimedOut: false,\n      };\n    case \"SIGNALLING_TIMEOUT\":\n      return {\n        ...state,\n        signallingTimedOut: true,\n      };\n    case \"SET_STREAM\":\n      return {\n        ...state,\n        stream: action.stream,\n      };\n    case \"SET_OFFER\":\n      return {\n        ...state,\n        sdpOffer: action.offer,\n      };\n    case \"STOPPING\":\n      return {\n        ...state,\n        webRtcState: \"STOPPING\",\n        sdpOffer: null,\n      };\n    case \"STOPPED\":\n      return {\n        ...state,\n        webRtcState: \"STOPPED\",\n        sdpOffer: null,\n        stream: null,\n      };\n    case \"START_PLAYING\":\n      return {\n        ...state,\n        webRtcState: \"PLAYING\",\n        sdpOffer: null,\n      };\n    case \"PROCESS_ANSWER_ERROR\":\n      return {\n        ...state,\n        error: action.error,\n      };\n    case \"ERROR\":\n      return {\n        ...state,\n        webRtcState: \"STOPPED\",\n        sdpOffer: null,\n        error: action.error,\n      };\n  }\n};\n\nexport const connectReducer = (\n  onComponentValueChange: (newComponentValue: ComponentValue) => void\n): React.Reducer<State, Action> => {\n  const connectedReducer: React.Reducer<State, Action> = (state, action) => {\n    const nextState = reducer(state, action);\n\n    const nextPlaying = nextState.webRtcState === \"PLAYING\";\n    const prevPlaying = state.webRtcState === \"PLAYING\";\n    const playingChanged = nextPlaying !== prevPlaying;\n\n    const nextSdpOffer = nextState.sdpOffer;\n    const prevSdpOffer = state.sdpOffer;\n    const sdpOfferChanged = nextSdpOffer !== prevSdpOffer;\n\n    if (playingChanged || sdpOfferChanged) {\n      if (prevSdpOffer) {\n        console.log(\"Send SDP offer\", prevSdpOffer);\n      }\n      onComponentValueChange({\n        playing: nextPlaying,\n        sdpOffer: nextSdpOffer ? nextSdpOffer.toJSON() : \"\", // `Streamlit.setComponentValue` cannot \"unset\" the field by passing null or undefined, so here an empty string is set instead when `sdpOffer` is undefined. // TODO: Create an issue\n      });\n    }\n\n    return nextState;\n  };\n\n  return connectedReducer;\n};\n","import { useReducer, useCallback, useRef, useEffect, useMemo } from \"react\";\nimport { compileMediaConstraints } from \"../media-constraint\";\nimport { ComponentValue } from \"../component-value\";\nimport { connectReducer, initialState } from \"./reducer\";\n\nexport type WebRtcMode = \"RECVONLY\" | \"SENDONLY\" | \"SENDRECV\";\nexport const isWebRtcMode = (val: unknown): val is WebRtcMode =>\n  val === \"RECVONLY\" || val === \"SENDONLY\" || val === \"SENDRECV\";\nexport const isReceivable = (mode: WebRtcMode): boolean =>\n  mode === \"SENDRECV\" || mode === \"RECVONLY\";\nexport const isTransmittable = (mode: WebRtcMode): boolean =>\n  mode === \"SENDRECV\" || mode === \"SENDONLY\";\n\nconst setupOffer = (\n  pc: RTCPeerConnection\n): Promise<RTCSessionDescription | null> => {\n  return pc\n    .createOffer()\n    .then((offer) => {\n      console.log(\"Created offer:\", offer);\n      return pc.setLocalDescription(offer);\n    })\n    .then(() => {\n      console.log(\"Wait for ICE gethering...\");\n      // Wait for ICE gathering to complete\n      return new Promise<void>((resolve) => {\n        if (pc.iceGatheringState === \"complete\") {\n          resolve();\n        } else {\n          const checkState = () => {\n            if (pc.iceGatheringState === \"complete\") {\n              pc.removeEventListener(\"icegatheringstatechange\", checkState);\n              resolve();\n            }\n          };\n          pc.addEventListener(\"icegatheringstatechange\", checkState);\n        }\n      });\n    })\n    .then(() => {\n      const offer = pc.localDescription;\n      return offer;\n    })\n    .catch((err) => {\n      console.error(err);\n      throw err;\n    });\n};\n\nconst SIGNALLING_TIMEOUT = 3 * 1000;\n\nexport const useWebRtc = (\n  props: {\n    mode: WebRtcMode;\n    desiredPlayingState: boolean | undefined;\n    sdpAnswerJson: string | undefined;\n    rtcConfiguration: RTCConfiguration | undefined;\n    mediaStreamConstraints: MediaStreamConstraints | undefined;\n  },\n  videoInput: MediaDeviceInfo | null,\n  audioInput: MediaDeviceInfo | null,\n  onComponentValueChange: (newComponentValue: ComponentValue) => void\n) => {\n  // Initialize component value\n  useEffect(() => {\n    return onComponentValueChange({\n      playing: false,\n      sdpOffer: \"\",\n    });\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const signallingTimerRef = useRef<NodeJS.Timeout>();\n  const pcRef = useRef<RTCPeerConnection>();\n  const reducer = useMemo(\n    () => connectReducer(onComponentValueChange),\n    [onComponentValueChange]\n  );\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const stop = useCallback(() => {\n    const stopInner = async () => {\n      if (state.webRtcState === \"STOPPING\") {\n        return;\n      }\n\n      const pc = pcRef.current;\n      pcRef.current = undefined;\n\n      dispatch({ type: \"STOPPING\" });\n\n      if (pc == null) {\n        return;\n      }\n\n      // close transceivers\n      if (pc.getTransceivers) {\n        pc.getTransceivers().forEach(function (transceiver) {\n          if (transceiver.stop) {\n            transceiver.stop();\n          }\n        });\n      }\n\n      // close local audio / video\n      pc.getSenders().forEach(function (sender) {\n        sender.track?.stop();\n      });\n\n      // close peer connection\n      return new Promise<void>((resolve) => {\n        setTimeout(() => {\n          pc.close();\n          resolve();\n        }, 500);\n      });\n    };\n\n    stopInner()\n      .catch((error) => dispatch({ type: \"ERROR\", error }))\n      .finally(() => {\n        dispatch({ type: \"STOPPED\" });\n      });\n  }, [state.webRtcState]);\n\n  const stopRef = useRef(stop);\n  stopRef.current = stop;\n\n  const start = useCallback(() => {\n    if (state.webRtcState !== \"STOPPED\") {\n      return;\n    }\n\n    const startInner = async () => {\n      dispatch({ type: \"SIGNALLING_START\" });\n      signallingTimerRef.current = setTimeout(() => {\n        dispatch({ type: \"SIGNALLING_TIMEOUT\" });\n      }, SIGNALLING_TIMEOUT);\n\n      const mode = props.mode;\n\n      const config: RTCConfiguration = props.rtcConfiguration || {};\n      console.log(\"RTCConfiguration:\", config);\n      const pc = new RTCPeerConnection(config);\n\n      // Connect received audio / video to DOM elements\n      if (mode === \"SENDRECV\" || mode === \"RECVONLY\") {\n        pc.addEventListener(\"track\", (evt) => {\n          const stream = evt.streams[0]; // TODO: Handle multiple streams\n          dispatch({ type: \"SET_STREAM\", stream });\n        });\n      }\n\n      // Set up transceivers\n      if (mode === \"SENDRECV\" || mode === \"SENDONLY\") {\n        const constraints = compileMediaConstraints(\n          props.mediaStreamConstraints,\n          videoInput?.deviceId,\n          audioInput?.deviceId\n        );\n        console.log(\"MediaStreamConstraints:\", constraints);\n\n        if (constraints.audio || constraints.video) {\n          if (navigator.mediaDevices == null) {\n            // Ref: https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia#privacy_and_security\n            // > A secure context is, in short, a page loaded using HTTPS or the file:/// URL scheme, or a page loaded from localhost.\n            throw new Error(\n              \"navigator.mediaDevices is undefined. It seems the current document is not loaded securely.\"\n            );\n          }\n          if (navigator.mediaDevices.getUserMedia == null) {\n            throw new Error(\"getUserMedia is not implemented in this browser\");\n          }\n\n          const stream = await navigator.mediaDevices.getUserMedia(constraints);\n          stream.getTracks().forEach((track) => {\n            pc.addTrack(track, stream);\n          });\n        }\n\n        if (mode === \"SENDONLY\") {\n          for (const transceiver of pc.getTransceivers()) {\n            transceiver.direction = \"sendonly\";\n          }\n        }\n      } else if (mode === \"RECVONLY\") {\n        pc.addTransceiver(\"video\", { direction: \"recvonly\" });\n        pc.addTransceiver(\"audio\", { direction: \"recvonly\" });\n      }\n      console.log(\"transceivers\", pc.getTransceivers());\n\n      pc.addEventListener(\"iceconnectionstatechange\", () => {\n        console.log(\"iceconnectionstatechange\", pc.iceConnectionState);\n        if (\n          pc.iceConnectionState === \"disconnected\" ||\n          pc.iceConnectionState === \"failed\" ||\n          pc.iceConnectionState === \"closed\"\n        ) {\n          stopRef.current();\n        }\n      });\n\n      pcRef.current = pc;\n\n      await setupOffer(pc).then((offer) => {\n        if (offer == null) {\n          throw new Error(\"Failed to create an offer SDP\");\n        }\n\n        dispatch({ type: \"SET_OFFER\", offer });\n      });\n    };\n\n    startInner().catch((error) =>\n      dispatch({\n        type: \"ERROR\",\n        error,\n      })\n    );\n  }, [\n    audioInput?.deviceId,\n    props.mediaStreamConstraints,\n    props.mode,\n    props.rtcConfiguration,\n    state.webRtcState,\n    videoInput?.deviceId,\n  ]);\n\n  // processAnswer\n  useEffect(() => {\n    const pc = pcRef.current;\n    if (pc == null) {\n      return;\n    }\n\n    const sdpAnswerJson = props.sdpAnswerJson;\n    if (pc.remoteDescription == null) {\n      if (sdpAnswerJson && state.webRtcState === \"SIGNALLING\") {\n        const sdpAnswer = JSON.parse(sdpAnswerJson);\n        console.log(\"Receive answer sdpOffer\", sdpAnswer);\n        pc.setRemoteDescription(sdpAnswer)\n          .then(() => {\n            console.log(\"Remote description is set\");\n\n            if (signallingTimerRef.current) {\n              clearTimeout(signallingTimerRef.current);\n            }\n            dispatch({ type: \"START_PLAYING\" });\n          })\n          .catch((error) => {\n            dispatch({ type: \"PROCESS_ANSWER_ERROR\", error });\n            stop();\n          });\n      }\n    }\n  }, [props.sdpAnswerJson, state.webRtcState, stop]);\n\n  // reconcilePlayingState\n  useEffect(() => {\n    const desiredPlayingState = props.desiredPlayingState;\n    if (desiredPlayingState != null) {\n      if (desiredPlayingState === true && state.webRtcState === \"STOPPED\") {\n        start();\n      } else if (\n        desiredPlayingState === false &&\n        (state.webRtcState === \"SIGNALLING\" || state.webRtcState === \"PLAYING\")\n      ) {\n        stop();\n      }\n    }\n  }, [props.desiredPlayingState, start, state.webRtcState, stop]);\n\n  return {\n    start,\n    stop,\n    state,\n  };\n};\n","import { Streamlit } from \"streamlit-component-lib\";\n\nexport interface ComponentValue {\n  playing: boolean;\n  sdpOffer: string; // `Streamlit.setComponentValue` cannot \"unset\" the field by passing null or undefined, so an empty string will be used here for that purpose. // TODO: Create an issue\n}\n\nexport function setComponentValue(componentValue: ComponentValue) {\n  return Streamlit.setComponentValue(componentValue);\n}\n","import React, { useState, useCallback } from \"react\";\nimport Box from \"@mui/material/Box\";\nimport Button from \"@mui/material/Button\";\nimport Alert from \"@mui/material/Alert\";\nimport DeviceSelectForm, {\n  DeviceSelectFormProps,\n} from \"./DeviceSelect/DeviceSelectForm\";\nimport MediaStreamPlayer from \"./MediaStreamPlayer\";\nimport Placeholder from \"./Placeholder\";\nimport { useRenderData } from \"streamlit-component-lib-react-hooks\";\nimport {\n  useWebRtc,\n  WebRtcMode,\n  isWebRtcMode,\n  isReceivable,\n  isTransmittable,\n} from \"./webrtc\";\nimport { getMediaUsage } from \"./media-constraint\";\nimport { ComponentValue, setComponentValue } from \"./component-value\";\nimport \"webrtc-adapter\";\n\ninterface WebRtcStreamerInnerProps {\n  disabled: boolean;\n  mode: WebRtcMode;\n  desiredPlayingState: boolean | undefined;\n  sdpAnswerJson: string | undefined;\n  rtcConfiguration: RTCConfiguration | undefined;\n  mediaStreamConstraints: MediaStreamConstraints | undefined;\n  videoHtmlAttrs: any;\n  audioHtmlAttrs: any;\n  onComponentValueChange: (newComponentValue: ComponentValue) => void;\n}\nconst WebRtcStreamerInner: React.VFC<WebRtcStreamerInnerProps> = (props) => {\n  const [devices, setDevices] = useState<{\n    video: MediaDeviceInfo | null;\n    audio: MediaDeviceInfo | null;\n  }>({ video: null, audio: null });\n  const { state, start, stop } = useWebRtc(\n    props,\n    devices.video,\n    devices.audio,\n    props.onComponentValueChange\n  );\n\n  const mode = props.mode;\n  const buttonDisabled =\n    props.disabled ||\n    (state.webRtcState === \"SIGNALLING\" && !state.signallingTimedOut) || // Users can click the stop button after signalling timed out.\n    state.webRtcState === \"STOPPING\" ||\n    props.desiredPlayingState != null;\n  const receivable = isWebRtcMode(mode) && isReceivable(mode);\n  const transmittable = isWebRtcMode(mode) && isTransmittable(mode);\n  const { videoEnabled, audioEnabled } = getMediaUsage(\n    props.mediaStreamConstraints\n  );\n\n  const handleDeviceSelect = useCallback<DeviceSelectFormProps[\"onSelect\"]>(\n    ({ video, audio }) => {\n      setDevices({ video, audio });\n    },\n    []\n  );\n\n  const [deviceSelectOpen, setDeviceSelectOpen] = useState(false);\n  const openDeviceSelect = useCallback(() => {\n    setDeviceSelectOpen(true);\n  }, []);\n  const closeDeviceSelect = useCallback(() => {\n    setDeviceSelectOpen(false);\n  }, []);\n  if (deviceSelectOpen) {\n    return (\n      <DeviceSelectForm\n        video={videoEnabled}\n        audio={audioEnabled}\n        defaultVideoDeviceId={devices.video ? devices.video.deviceId : null}\n        defaultAudioDeviceId={devices.audio ? devices.audio.deviceId : null}\n        onSelect={handleDeviceSelect}\n        onClose={closeDeviceSelect}\n      />\n    );\n  }\n\n  return (\n    <Box>\n      {state.error && (\n        <Alert severity=\"error\">\n          {state.error.name}: {state.error.message}\n        </Alert>\n      )}\n      <Box py={1} display=\"flex\">\n        {state.stream ? (\n          <MediaStreamPlayer\n            stream={state.stream}\n            userDefinedVideoAttrs={props.videoHtmlAttrs}\n            userDefinedAudioAttrs={props.audioHtmlAttrs}\n          />\n        ) : (\n          receivable && (\n            <Placeholder loading={state.webRtcState === \"SIGNALLING\"} />\n          )\n        )}\n      </Box>\n      <Box display=\"flex\" justifyContent=\"space-between\">\n        {state.webRtcState === \"PLAYING\" ||\n        state.webRtcState === \"SIGNALLING\" ? (\n          <Button variant=\"contained\" onClick={stop} disabled={buttonDisabled}>\n            Stop\n          </Button>\n        ) : (\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={start}\n            disabled={buttonDisabled}\n          >\n            Start\n          </Button>\n        )}\n        {transmittable && state.webRtcState === \"STOPPED\" && (\n          <Button color=\"inherit\" onClick={openDeviceSelect}>\n            Select device\n          </Button>\n        )}\n      </Box>\n    </Box>\n  );\n};\n\nconst WebRtcStreamer: React.VFC = () => {\n  const renderData = useRenderData();\n\n  const mode = renderData.args[\"mode\"];\n  const desiredPlayingState = renderData.args[\"desired_playing_state\"];\n  const sdpAnswerJson = renderData.args[\"sdp_answer_json\"];\n  const rtcConfiguration: RTCConfiguration = renderData.args.rtc_configuration;\n  const mediaStreamConstraints: MediaStreamConstraints =\n    renderData.args.media_stream_constraints;\n  const videoHtmlAttrs = renderData.args.video_html_attrs;\n  const audioHtmlAttrs = renderData.args.audio_html_attrs;\n\n  if (!isWebRtcMode(mode)) {\n    throw new Error(`Invalid mode ${mode}`);\n  }\n\n  return (\n    <WebRtcStreamerInner\n      disabled={renderData.disabled}\n      mode={mode}\n      desiredPlayingState={desiredPlayingState}\n      sdpAnswerJson={sdpAnswerJson}\n      rtcConfiguration={rtcConfiguration}\n      mediaStreamConstraints={mediaStreamConstraints}\n      videoHtmlAttrs={videoHtmlAttrs}\n      audioHtmlAttrs={audioHtmlAttrs}\n      onComponentValueChange={setComponentValue}\n    />\n  );\n};\n\nexport default WebRtcStreamer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ThemeProvider } from \"./ThemeProvider\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport { StreamlitProvider } from \"streamlit-component-lib-react-hooks\";\nimport WebRtcStreamer from \"./WebRtcStreamer\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <StreamlitProvider>\n      <ThemeProvider>\n        <CssBaseline />\n        <WebRtcStreamer />\n      </ThemeProvider>\n    </StreamlitProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}